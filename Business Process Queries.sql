--- Query to output the rounded average of all salaries in each department for all the employees hired in the last decade

SELECT DEP.DEPARTMENT_ID AS "DEPARTMENT ID", ROUND(AVG(OUT.SALARY)) AS "AVERAGE OF SALARIES" FROM DEPARTMENTS_TABLE DEP
JOIN 
(SELECT EMP.DEPARTMENT_ID, EMP.SALARY FROM  EMPLOYEE_TABLE EMP
    WHERE TO_CHAR(EMP.HIRE_DATE,'YYYY')>= '2010' AND TO_CHAR(EMP.HIRE_DATE,'YYYY') <= '2021') OUT ON DEP.DEPARTMENT_ID = OUT.DEPARTMENT_ID
GROUP BY DEP.DEPARTMENT_ID ORDER BY 1;

--- Using a new operator (ROW_NUMBER)
--- The ROW_NUMBER operator is a window function that assigns a sequential integer to each row within the partition of a result set.
--- In the below query, we are assigning a sequential integer to each row with partitioning with the Department IDs.

SELECT FIRST_NAME || ' ' || LAST_NAME AS "FULL NAME", DEPARTMENT_ID, SALARY, ROW_NUMBER()
   OVER (PARTITION BY DEPARTMENT_ID ORDER BY SALARY) AS EMP_ID
   FROM EMPLOYEES WHERE DEPARTMENT_ID IS NOT NULL;
   
--- Multiple join
--- Query to display the count of employees in each location with at least 1 employee in that location.

SELECT LOC.LOCATION_NAME, COUNT(EMP.EMPLOYEE_ID) AS "NUMBER OF EMPLOYEES"
FROM EMPLOYEE_TABLE EMP 
    JOIN DEPARTMENTS_TABLE DEP
    ON (EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID)
    JOIN LOCATIONS_TABLE LOC
    ON (DEP.LOCATION_ID = LOC.LOCATION_ID)
GROUP BY LOC.LOCATION_NAME
HAVING COUNT(EMP.EMPLOYEE_ID) > 0 ORDER BY 1;

--- Query to display the number of employees that worked in a particular project

SELECT PEMP.PROJECT_EMP_ID AS "Project ID", PROJ.PROJECT_NAME AS "Project Name", COUNT(PEMP.EMPLOYEE_EMP_ID) AS "Number of Employees"
FROM EMPLOYEE_TABLE EMP 
JOIN PROJECT_EMPLOYEES_TABLE PEMP ON EMP.EMPLOYEE_ID = PEMP.EMPLOYEE_EMP_ID
JOIN PROJECTS_TABLE PROJ ON PROJ.PROJECT_ID = PEMP.PROJECT_EMP_ID
GROUP BY PEMP.PROJECT_EMP_ID, PROJ.PROJECT_NAME
ORDER BY 3;

--- To be query

SELECT CASE WHEN PROJECT_ID = &&PROJID THEN PROJECT_NAME END AS EXISTING_PROJECT_NAME FROM PROJECTS_TABLE WHERE PROJECT_ID = &PROJID;

UNDEFINE PROJID;

--- Trigger to show if the project already exists

CREATE OR REPLACE TRIGGER PROJECT_CHECK
    BEFORE 
        INSERT
    ON PROJECT_EMPLOYEES_TABLE
FOR EACH ROW
BEGIN
    IF :NEW.PROJECT_EMP_ID = :OLD.PROJECT_EMP_ID THEN
    DBMS_OUTPUT.PUT_LINE('EXISTING PROEJCT');
    END IF;
END;
/